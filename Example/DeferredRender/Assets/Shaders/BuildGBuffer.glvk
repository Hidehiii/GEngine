#Name BuildGBuffer

#Properties
vector SpecularColor;

sampler2D _Color;
sampler2D _Roughness;
sampler2D _Metallic;

#EndProperties

#BeginBlock VS
#include"Assets/Shaders/Core/Core.glsl"

layout(location = 0) in vec4 in_Position;
layout(location = 1) in vec4 in_Color;
layout(location = 2) in vec4 in_Normal;
layout(location = 3) in vec4 in_Tangent;
layout(location = 4) in vec2 in_UV0;
layout(location = 5) in vec2 in_UV1;
layout(location = 6) in vec2 in_UV2;
layout(location = 7) in vec2 in_UV3;

struct v2f
{
	vec4 Position;
	vec4 Color;
	vec4 Normal;
	vec4 Tangent;
	vec2 UV0;
	vec2 UV1;
	vec2 UV2;
	vec2 UV3;	
};

layout(location = 0) out v2f OUT;

void main()
{
	gl_Position = GE_MATRIX_P * GE_MATRIX_V * GE_MATRIX_M * in_Position;

	OUT.Position = gl_Position;
	OUT.Color = in_Color;
	OUT.Normal = vec4(Transpose(Inverse(mat3(GE_MATRIX_M))) * in_Normal.xyz, 0.0f);
	OUT.Tangent = in_Tangent;
	OUT.UV0 = in_UV0;
	OUT.UV1 = in_UV1;
	OUT.UV2 = in_UV2;
	OUT.UV3 = in_UV3;
}

#EndBlock

#BeginBlock FS
#include"Assets/Shaders/Core/Core.glsl"

layout(location = 0) out vec4 out_GBuffer_0;    // Albedo(x y z), Roughness(w)
layout(location = 1) out vec4 out_GBuffer_1;    // Normal(x y z), Metallic(w)
layout(location = 2) out vec4 out_GBuffer_2;    // SpecularColor(x, y, z), Specular(w)
layout(location = 3) out vec4 out_GBuffer_3;    // Position(x, y, z)

struct v2f
{
	vec4 Position;
	vec4 Color;
	vec4 Normal;
	vec4 Tangent;
	vec2 UV0;
	vec2 UV1;
	vec2 UV2;
	vec2 UV3;	
};

layout(location = 0) in v2f IN;

layout(binding = GE_BINDING_START + 0) uniform sampler2D _Color;
layout(binding = GE_BINDING_START + 1) uniform sampler2D _Roughness;
layout(binding = GE_BINDING_START + 2) uniform sampler2D _Metallic;

void main()
{
	vec4 albedo = texture(_Color, IN.UV0);
	vec4 normal = IN.Normal;

	float roughness = texture(_Roughness, IN.UV0).y;
	float metallic = texture(_Metallic, IN.UV0).x;

	vec3 specularColor = SpecularColor.xyz;
	float specular = SpecularColor.w;

	out_GBuffer_0.xyz = albedo.xyz;
	out_GBuffer_0.w = roughness;

	out_GBuffer_1.xyz = normal.xyz;
	out_GBuffer_1.w = metallic;

	out_GBuffer_2.xyz = specularColor.xyz;
	out_GBuffer_2.w = specular;

	out_GBuffer_3.xyz = IN.Position.xyz;
	out_GBuffer_3.w = 1.0f;
}
#EndBlock

##Pass BuildGBuffer
Vertex VS
Fragment FS
##EndPass