#Name Lighting

#Properties

sampler2D _GBuffer_0;    
sampler2D _GBuffer_1;    
sampler2D _GBuffer_2;    
sampler2D _GBuffer_3;    

#EndProperties

#BeginBlock VS
#include"Assets/Shaders/Core/Core.glsl"

layout(location = 0) in vec4 in_Position;
layout(location = 1) in vec2 in_UV;

struct v2f
{
	vec4 Position;
	vec2 UV;	
};
layout(location = 0) out v2f OUT;
void main()
{
	gl_Position =  in_Position;

	OUT.Position = gl_Position;
	OUT.UV = in_UV;
}
#EndBlock

#BeginBlock FS
#include"Assets/Shaders/Core/Core.glsl"

layout(location = 0) out vec4 out_Color;

struct v2f
{
	vec4 Position;
	vec2 UV;
};

layout(location = 0) in v2f IN;

layout(binding = GE_BINDING_START + 0) uniform sampler2D _GBuffer_0;  // Albedo(x y z), Roughness(w)
layout(binding = GE_BINDING_START + 1) uniform sampler2D _GBuffer_1;  // Normal(x y z), Metallic(w)
layout(binding = GE_BINDING_START + 2) uniform sampler2D _GBuffer_2;  // SpecularColor(x, y, z), Specular(w)
layout(binding = GE_BINDING_START + 3) uniform sampler2D _GBuffer_3;  // Position(x, y, z)

void main()
{
	vec2 uv = TransformUV(IN.UV);

	vec3 color = texture(_GBuffer_0, uv).xyz;
	vec3 normal = texture(_GBuffer_1, uv).xyz;
	vec3 specularColor = texture(_GBuffer_2, uv).xyz;
	vec3 position = texture(_GBuffer_3, uv).xyz;

	float roughness = texture(_GBuffer_0, uv).w;
	float metallic = texture(_GBuffer_1, uv).w;
	float specular = texture(_GBuffer_2, uv).w;

	vec3 normalDirection = normalize(normal);

	vec3 lightDirection = normalize(mix(GE_MAIN_LIGHT_POSITION.xyz, GE_MAIN_LIGHT_POSITION.xyz - position, GE_MAIN_LIGHT_POSITION.w));

	vec3 lightReflectDirection = reflect( -GE_MAIN_LIGHT_DIRECTION.xyz, normalDirection);

	vec3 viewDirection = normalize(GE_CAMERA_POSITION.xyz - position);

	vec3 viewReflectDirection = normalize(reflect( -viewDirection, normalDirection ));

	vec3 halfDirection = normalize(viewDirection + lightDirection); 

	float NdotL = max(0.0, dot( normalDirection, lightDirection ));

    float NdotH =  max(0.0,dot( normalDirection, halfDirection));

    float NdotV =  max(0.0,dot( normalDirection, viewDirection));

    float VdotH = max(0.0,dot( viewDirection, halfDirection));

    float LdotH =  max(0.0,dot(lightDirection, halfDirection));
 
    float LdotV = max(0.0,dot(lightDirection, viewDirection)); 

    float RdotV = max(0.0, dot( lightReflectDirection, viewDirection ));

    roughness = 1 - (roughness * roughness);

    roughness = roughness * roughness;

    vec3 diffuseColor = color.rgb * (1 - metallic);

    // Diffuse fresnel

    float FresnelLight = SchlickFresnel(NdotL);

    float FresnelView = SchlickFresnel(NdotV);

    float FresnelDiffuse90 = 0.5 + 2.0 * LdotH * LdotH * roughness;

   	diffuseColor *= Mix(1, FresnelDiffuse90, FresnelLight) * Mix(1, FresnelDiffuse90, FresnelView);
   	

    vec3 specColor = mix(specularColor.rgb, color.rgb, metallic * 0.5);

    vec3 SpecularDistribution = specColor;

    float GeometricShadow = 1;

	vec3 FresnelFunction = specColor;

	SpecularDistribution *=  BeckmannNormalDistribution(roughness, NdotH);

	GeometricShadow *= AshikhminShirleyGeometricShadowing (NdotL, NdotV, LdotH);

	FresnelFunction *=  SchlickFresnel(specColor, LdotH);

	vec3 specularity = (SpecularDistribution * FresnelFunction * GeometricShadow) / (4 * (  NdotL * NdotV));
    float grazingTerm = saturate(roughness + metallic);

    vec3 lightingModel = ((diffuseColor) + specularity);

    lightingModel *= NdotL;

    vec4 finalDiffuse = vec4(lightingModel,1);

    out_Color = finalDiffuse;
}
#EndBlock

##Pass Lighting
Vertex VS
Fragment FS
##EndPass